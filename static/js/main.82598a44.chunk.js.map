{"version":3,"sources":["components/Weather/OtherDetails.module.css","components/User/UserSearch.module.css","components/Weather/Weather.module.css","components/Weather/WeatherDetails.module.css","components/Weather/DailyWeather.module.css","components/UI/Layout.module.css","components/UI/Notification.module.css","components/UI/Loading.module.css","components/Weather/TodayInfo.module.css","components/UI/Layout.tsx","store/uiSlice.ts","store/citySlice.ts","store/actions.tsx","components/User/UserSearch.tsx","components/Weather/Weather.tsx","components/Weather/WeatherDetails.tsx","components/Weather/DailyWeather.tsx","components/UI/Notification.tsx","components/UI/Loading.tsx","components/Weather/TodayInfo.tsx","components/Weather/OtherDetails.tsx","App.tsx","reportWebVitals.js","store/store.ts","index.js"],"names":["module","exports","Layout","props","className","classes","main","children","uiSlice","createSlice","name","initialState","notification","loading","reducers","showNotification","state","action","payload","clearNotification","setLoading","uiActions","actions","citySlice","weather","hourlyWeather","dailyWeather","addWeather","console","log","temp","toFixed","temp_max","feels_like","visibility","unixTimestamp","sys","sunrise","dateObject","Date","humanDateFormat","getHours","getMinutes","unixTimestamp2","sunset","dateObject2","humanDateFormat2","addHourlyWeather","hourly","forEach","el","current","addDailyWeather","daily","day","cityActions","key","process","actionsfetchDataHandler","userValue","dispatch","fetchDataHandler","a","fetch","response","json","data","fetch2DataHandler","coord","lat","lon","data2","fetch3DataHandler","data3","message","UserSearch","useState","cityIsValid","setCityIsValid","useDispatch","inputRef","useRef","onSubmit","e","preventDefault","inputRefValue","value","trim","window","scrollTo","top","behavior","htmlFor","notValid","ref","type","id","Weather","useSelector","city","upperCaseName","description","split","map","index","toUpperCase","join","motion","div","initial","x","animate","weatherDesc","WeatherDetails","updatedArray","slice","dt","humanTimeFormat","Math","random","ul","src","icon","alt","DailyWeather","daysOfWeek","getDay","v4","Notification","y","Loading","TodayInfo","OtherDetails","title","humidity","wind","speed","App","ui","useEffect","timer","setTimeout","clearTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82598a44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"OtherDetails_title__2RY6X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-form\":\"UserSearch_search-form__1UBi6\",\"form-group\":\"UserSearch_form-group__3RDPS\",\"notValid\":\"UserSearch_notValid__330z1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather\":\"Weather_weather__vFEt3\",\"weatherDesc\":\"Weather_weatherDesc__-Ujl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weather-details\":\"WeatherDetails_weather-details___DH6K\",\"weather-details__item\":\"WeatherDetails_weather-details__item__29mmk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"daily-weather\":\"DailyWeather_daily-weather__1WPCY\",\"daily-weather__item\":\"DailyWeather_daily-weather__item__3FjHQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__1FPxX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__1YvKh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-roller\":\"Loading_lds-roller__3YCVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"today-info\":\"TodayInfo_today-info__1ODPU\"};","import React, { Fragment } from 'react'\r\nimport classes from './Layout.module.css'\r\n\r\nconst Layout: React.FC<{ children: React.ReactNode }> = (props) => {\r\n    return (\r\n        <Fragment>\r\n            <main className={classes.main}>{props.children}</main>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Layout\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ninterface Notification {\r\n    message: string;\r\n}\r\n\r\ninterface uiState {\r\n    notification: Notification | null;\r\n    loading: boolean;\r\n}\r\n\r\nconst initialState: uiState = {\r\n    notification: null,\r\n    loading: false\r\n}\r\n\r\nconst uiSlice = createSlice({\r\n    name: 'ui',\r\n    initialState,\r\n    reducers: {\r\n        showNotification(state, action: PayloadAction<{ message: string }>) {\r\n            state.notification! = action.payload\r\n\r\n        },\r\n        clearNotification(state) {\r\n            state.notification = null\r\n        },\r\n        setLoading(state, action: PayloadAction<boolean>) {\r\n            state.loading = action.payload\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const uiActions = uiSlice.actions;\r\n\r\nexport default uiSlice;","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\n\r\ninterface cityState {\r\n    weather: any;\r\n    hourlyWeather: any;\r\n    dailyWeather: any;\r\n}\r\n\r\nconst initialState: cityState = {\r\n    weather: null,\r\n    hourlyWeather: null,\r\n    dailyWeather: null\r\n}\r\n\r\nconst citySlice = createSlice({\r\n    name: 'city',\r\n    initialState,\r\n    reducers: {\r\n        addWeather(state, action: PayloadAction<string>) {\r\n            console.log(action.payload)\r\n            state.weather = action.payload\r\n            state.weather.main.temp = (state.weather.main.temp - 273.15).toFixed(0)\r\n            state.weather.main.temp_max = (state.weather.main.temp_max - 273.15).toFixed(0)\r\n            state.weather.main.feels_like = (state.weather.main.feels_like - 273.15).toFixed(0)\r\n            state.weather.visibility = state.weather.visibility / 1000\r\n\r\n            const unixTimestamp = state.weather.sys.sunrise\r\n            const milliseconds = unixTimestamp * 1000\r\n            const dateObject = new Date(milliseconds)\r\n            const humanDateFormat = (dateObject.getHours() < 10 ? '0' : '') + dateObject.getHours() + ':' + (dateObject.getMinutes() < 10 ? '0' : '') + dateObject.getMinutes()\r\n            state.weather.sys.sunrise = humanDateFormat\r\n\r\n            const unixTimestamp2 = state.weather.sys.sunset\r\n            const milliseconds2 = unixTimestamp2 * 1000\r\n            const dateObject2 = new Date(milliseconds2)\r\n            const humanDateFormat2 = (dateObject2.getHours() < 10 ? '0' : '') + dateObject2.getHours() + ':' + (dateObject2.getMinutes() < 10 ? '0' : '') + dateObject2.getMinutes()\r\n            state.weather.sys.sunset = humanDateFormat2\r\n        },\r\n        addHourlyWeather(state, action: PayloadAction<object>) {\r\n            state.hourlyWeather = action.payload\r\n            state.hourlyWeather.hourly.forEach((el: any) => {\r\n                el.temp = (el.temp - 273.15).toFixed()\r\n            })\r\n            state.hourlyWeather.current.temp = (state.hourlyWeather.current.temp - 273.15).toFixed()\r\n        },\r\n        addDailyWeather(state, action: PayloadAction<object>) {\r\n            state.dailyWeather = action.payload\r\n            state.dailyWeather.daily.forEach((el: any) => {\r\n                el.temp.day = (el.temp.day - 273.15).toFixed()\r\n            })\r\n        },\r\n    }\r\n})\r\n\r\n\r\nexport const cityActions = citySlice.actions;\r\n\r\nexport default citySlice;","import {cityActions} from './citySlice'\r\nimport {uiActions} from './uiSlice'\r\nimport { AppDispatch } from './store'\r\n\r\nconst key = process.env.REACT_APP_VALUE\r\n\r\nexport const actionsfetchDataHandler = (userValue: string) => {\r\n    return async (dispatch: any) => {\r\n        const fetchDataHandler = async () => {\r\n          const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${userValue}&appid=${key}&lang=ru`)\r\n          // if (!response.ok) {\r\n          //   throw new Error({message: 'There is a server error'})\r\n          // }\r\n          const data = await response.json()\r\n          dispatch(cityActions.addWeather(data))\r\n          return data\r\n          }\r\n\r\n          const fetch2DataHandler = async (data: any) => { \r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&exclude=daily&lang=ru&appid=${key}`)\r\n            // if (!response.ok) {\r\n            //   throw new Error({message: 'There is a server error'})\r\n            // }\r\n            const data2 = await response.json()\r\n            dispatch(cityActions.addHourlyWeather(data2))\r\n            return data2\r\n          }\r\n\r\n          const fetch3DataHandler = async (data: any) => {\r\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&exclude=hourly&appid=${key}&lang=ru`)\r\n            // if (!response.ok) {\r\n            //   throw new Error({message: 'There is a server error'})\r\n            // }\r\n            const data3 = await response.json()\r\n            dispatch(cityActions.addDailyWeather(data3))\r\n            return data3\r\n          }\r\n\r\n      \r\n      try {\r\n        dispatch(uiActions.setLoading(true))\r\n        const data = await fetchDataHandler()\r\n        await fetch2DataHandler(data)\r\n        await fetch3DataHandler(data)\r\n      } catch (error) {\r\n        dispatch(uiActions.showNotification({\r\n          message:'Некорректный ввод! Такого города нет...'\r\n        }))  \r\n      }\r\n            dispatch(uiActions.setLoading(false))\r\n\r\n\r\n    // just another option below of using then/catch\r\n\r\n      // dispatch(uiActions.setLoading(true))\r\n      // fetchDataHandler()\r\n      // .then(data => fetchWeatherHandler(data))\r\n      // .catch(err => {\r\n      //   dispatch(uiActions.showNotification({\r\n      //     message:'Некорректный ввод! Такого города нет!'\r\n      //   }))  \r\n      // })\r\n      // dispatch(uiActions.setLoading(false))\r\n  \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useRef, useState } from 'react'\r\nimport classes from './UserSearch.module.css'\r\nimport { uiActions } from '../../store/uiSlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { actionsfetchDataHandler } from '../../store/actions'\r\n\r\nconst UserSearch: React.FC = () => {\r\n    const [cityIsValid, setCityIsValid] = useState<boolean>(true)\r\n    const dispatch = useDispatch()\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n\r\n    const onSubmitHandler = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        let inputRefValue= inputRef.current!.value.trim();\r\n\r\n        if (inputRefValue === '') {\r\n            setCityIsValid(false)\r\n            dispatch(uiActions.showNotification({\r\n                message: 'Вы не ввели город!'\r\n            }))\r\n        } else {\r\n            dispatch(actionsfetchDataHandler(inputRefValue))\r\n            if (!cityIsValid) {\r\n                setCityIsValid(true);\r\n            }\r\n            inputRef.current!.value = ''\r\n        }\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n\r\n    }\r\n\r\n    return (\r\n        <form className={classes[`search-form`]} onSubmit={onSubmitHandler}>\r\n            <div className={classes[`form-group`]}>\r\n                <label htmlFor=\"city\">Введите город</label><br />\r\n                <input className={`${!cityIsValid ? classes.notValid : ''}`} ref={inputRef} type=\"text\" id=\"city\" />\r\n            </div>\r\n            <button>Получить данные о погоде</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UserSearch\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { motion } from 'framer-motion'\r\nimport classes from './Weather.module.css'\r\nimport { RootState } from '../../store/store';\r\n\r\n\r\nconst Weather: React.FC = () => {\r\n\r\n    const weather = useSelector((state: RootState) => state.city.weather)\r\n\r\n    // const icon = `http://openweathermap.org/img/w/${weather.weather[0].icon}.png`;\r\n\r\n    // To change the first letter of the weather description\r\n    const upperCaseName = weather?.weather[0].description\r\n        .split('')\r\n        .map((el: string, index: number) => {\r\n            return index === 0 ? el.toUpperCase() : el\r\n        })\r\n        .join('')\r\n\r\n\r\n    return (\r\n        <motion.div initial={{ x: '-100vw' }} animate={{ x: 0 }} className={classes.weather}>\r\n            <div className={classes.weatherDesc}>\r\n                <h2>{weather.name} </h2>\r\n                <h3>{upperCaseName}</h3>\r\n                <h1>{weather.main.temp} °C</h1>\r\n            </div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport classes from './WeatherDetails.module.css'\r\nimport { motion } from 'framer-motion'\r\nimport { RootState } from '../../store/store';\r\n\r\nconst WeatherDetails: React.FC = () => {\r\n\r\n    const hourlyWeather = useSelector((state: RootState) => state.city.hourlyWeather)\r\n\r\n    const updatedArray = hourlyWeather?.hourly?.slice(0, 6).map((el: any) => {\r\n        const unixTimestamp = el.dt\r\n        const milliseconds = unixTimestamp * 1000\r\n        const dateObject = new Date(milliseconds)\r\n        const humanTimeFormat = (dateObject.getHours() < 10 ? '0' : '') + dateObject.getHours() + ':' + dateObject.getMinutes() + '0'\r\n\r\n        return {\r\n            ...el,\r\n            dt: humanTimeFormat,\r\n            id: Math.random()\r\n        }\r\n    })\r\n\r\n    return (\r\n        <motion.ul initial={{ x: '100vw' }} animate={{ x: 0 }} className={classes[`weather-details`]} >\r\n            {updatedArray.map((el: any) => {\r\n                return <li className={classes[`weather-details__item`]} key={el.id}>\r\n                    <div>{el.dt}</div>\r\n                    <div>\r\n                        <img src={`http://openweathermap.org/img/w/${el.weather[0].icon}.png`} alt=\"weather icon\" />\r\n                    </div>\r\n                    <div>{el.temp}{' '}°C</div>\r\n                </li>\r\n            })}\r\n        </motion.ul>\r\n    )\r\n}\r\n\r\nexport default WeatherDetails\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport classes from './DailyWeather.module.css'\r\nimport { RootState } from '../../store/store';\r\nimport {v4} from 'uuid';\r\n\r\nconst DailyWeather: React.FC = () => {\r\n\r\n    const daysOfWeek = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота']\r\n\r\n    const dailyWeather = useSelector((state: RootState) => state.city.dailyWeather)\r\n\r\n    const updatedArray = dailyWeather.daily.slice(1).map((el: any) => {\r\n\r\n        const unixTimestamp = el.dt\r\n        const milliseconds = unixTimestamp * 1000\r\n        const dateObject = new Date(milliseconds)\r\n        const humanDateFormat = dateObject.getDay()\r\n\r\n        return {\r\n            ...el,\r\n            dt: daysOfWeek[humanDateFormat],\r\n            id: v4()\r\n        }\r\n    })\r\n\r\n\r\n    return (\r\n        <ul className={classes[`daily-weather`]}>\r\n            {updatedArray.map((el: any) => {\r\n                return <li className={classes[`daily-weather__item`]} key={el.id}>\r\n                    <span>{el.dt}</span>\r\n                    <span>\r\n                        <img src={`http://openweathermap.org/img/w/${el.weather[0].icon}.png`} alt=\"weather icon\" />\r\n                    </span>\r\n                    <span>{el.temp.day}{' '}°C</span>\r\n                </li>\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default DailyWeather\r\n","import React from 'react'\r\nimport { motion } from 'framer-motion'\r\nimport classes from './Notification.module.css'\r\n\r\nconst Notification: React.FC<{ message: string }> = (props) => {\r\n    return (\r\n        <motion.div initial={{ y: '-100vh' }} animate={{ y: 0 }} className={classes.notification}>\r\n            <div>{props.message}</div>\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport classes from './Loading.module.css'\r\n\r\nconst Loading: React.FC = () => {\r\n    return (\r\n        <div className={classes[`lds-roller`]}>\r\n            <div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Loading\r\n\r\n\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport classes from './TodayInfo.module.css'\r\nimport { RootState } from '../../store/store';\r\n\r\nconst TodayInfo: React.FC = () => {\r\n\r\n    const weather = useSelector((state: RootState) => state.city.weather)\r\n\r\n    return (\r\n        <div className={classes[`today-info`]}>\r\n            <p>Сегодня: cейчас {weather.weather[0].description}.\r\n                Teмпература воздуха {weather.main.temp} °C.\r\n                Ожидаемая максимальная температура воздуха сегодня {weather.main.temp_max} °C.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodayInfo\r\n","import React, { Fragment } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport classes from './OtherDetails.module.css'\r\nimport { RootState } from '../../store/store';\r\n\r\nconst OtherDetails: React.FC = () => {\r\n\r\n    const weather = useSelector((state: RootState) => state.city.weather)\r\n\r\n    return (\r\n        <Fragment>\r\n            <div>\r\n                <div className={classes.title}>Восход солнца</div>\r\n                <div>{weather.sys.sunrise}</div>\r\n                <hr />\r\n            </div>\r\n            <div>\r\n                <div className={classes.title}>Заход солнца</div>\r\n                <div>{weather.sys.sunset}</div>\r\n                <hr />\r\n            </div>\r\n            <div>\r\n                <div className={classes.title}>Влажность</div>\r\n                <div>{weather.main.humidity} %</div>\r\n                <hr />\r\n            </div>\r\n            <div>\r\n                <div className={classes.title}>Ветер</div>\r\n                <div>{weather.wind.speed} м/c</div>\r\n                <hr />\r\n            </div>\r\n            <div>\r\n                <div className={classes.title}>Ощущается как</div>\r\n                <div>{weather.main.feels_like} °C</div>\r\n                <hr />\r\n            </div>\r\n            <div>\r\n                <div className={classes.title}>Видимость</div>\r\n                <div>{weather.visibility} км</div>\r\n                <hr />\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default OtherDetails\r\n","import { useEffect } from 'react'\nimport Layout from './components/UI/Layout';\nimport UserSearch from \"./components/User/UserSearch\";\nimport Weather from './components/Weather/Weather';\nimport WeatherDetails from './components/Weather/WeatherDetails';\nimport DailyWeather from './components/Weather/DailyWeather';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actionsfetchDataHandler } from './store/actions'\nimport { uiActions } from './store/uiSlice'\nimport Notification from './components/UI/Notification';\nimport Loading from './components/UI/Loading';\nimport TodayInfo from './components/Weather/TodayInfo';\nimport OtherDetails from './components/Weather/OtherDetails';\nimport { RootState } from './store/store';\n\n// \"homepage\": \"https://mancun07.github.io/weather-app\",\n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const weather = useSelector((state: RootState) => state.city.weather)\n  const hourlyWeather = useSelector((state: RootState) => state.city.hourlyWeather)\n  const dailyWeather = useSelector((state: RootState) => state.city.dailyWeather)\n  const notification = useSelector((state: RootState) => state.ui.notification)\n  const loading = useSelector((state: RootState) => state.ui.loading)\n\n  useEffect(() => {\n    dispatch(actionsfetchDataHandler('Санкт-Петербург'))\n  }, [dispatch])\n\n\n  useEffect(() => {\n    let timer = setTimeout(() => {\n      dispatch(uiActions.clearNotification())\n    }, 3000)\n    return () => clearTimeout(timer)\n  }, [dispatch, notification])\n\n  return (\n    <Layout>\n      {loading && <Loading />}\n      {!loading && notification && <Notification message={notification.message} />}\n      {!loading && weather && <Weather />}\n      {!loading && hourlyWeather && <WeatherDetails />}\n      <UserSearch />\n      {!loading && dailyWeather && <DailyWeather />}\n      {!loading && weather && <TodayInfo />}\n      {!loading && weather && <OtherDetails />}\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport uiSlice from './uiSlice'\r\nimport citySlice from './citySlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n      ui: uiSlice.reducer,\r\n      city: citySlice.reducer,\r\n  },\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store/store'\nimport { Provider } from 'react-redux'\n\n\n\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}